#!/usr/bin/env python

import sys
from disco.core import Disco
import readline
import re

disco_host = "disco://localhost"
if len(sys.argv) == 2:
    disco_host = sys.argv[1]

disco = Disco(disco_host)

def full_match(p, x):
    m = re.match(p, x)
    return m is not None and m.group() == x

def op_kill(arg):
    for x in ls_active():
        job_name = x[2]
        if full_match(arg, job_name):
            print "Killing", job_name
            disco.kill(job_name)

def op_clean(arg):
    for x in ls_inactive():
        job_name = x[2]
        if full_match(arg, job_name):
            print "Cleaning", job_name 
            disco.clean(job_name)

def op_purge(arg):
    for x in ls_inactive():
        job_name = x[2]
        if full_match(arg, job_name):
            print "Purging", job_name
            disco.purge(job_name)

def op_debug(arg):
   cmd = "less `find /srv/disco/data/_disco_8989 -name %s`/events" % arg
   op_shell(cmd)

def op_tail(arg):
   cmd = "tail -f `find /srv/disco/data/_disco_8989 -name %s`/events" % arg
   op_shell(cmd)

def op_tail_new(n, s):
   if s == "job_active":
       events = disco.events(n)
       try:
           for x in events:
               print x
       except:
           pass

def op_info(arg):
   from pprint import pprint
   pprint(disco.jobinfo(arg))

def op_shell(arg):
   import os
   os.system(arg)


def op_ls_all(arg):
    for x in ls_active()+ls_inactive():
        print x

def op_ls_active(arg=None):
    for x in ls_active():
        print x

def ls_inactive():
    return [x for x in disco.joblist() if x[1] != "job_active"]

def ls_active():
    return [x for x in disco.joblist() if x[1] == "job_active"]


def op_help(arg=None):
   for x in sorted(Ops.keys()):
       name, desc, fp = Ops[x]
       print "%-16s %s" % (name, desc)


def op_quit(arg):
    pass

def execute(inp):

    cmd_arg = inp.split(None, 1)
    if len(cmd_arg) == 1:
        cmd_arg += [None]

    cmd, arg = cmd_arg
    if cmd in Ops:
        fp = Ops[cmd][2]
        fp(arg)
    else:
        raise Exception("Bad command")

Ops = {
       "help":  ("help (?)", "list of commands", op_help),
       "?":     ("help (?)", "list of commands", op_help),
       "ls":    ("ls", "list all jobs", op_ls_all), 
       "ps":    ("ps", "list all active jobs", op_ls_active), 
       "q":     ("quit (q)", "quit the shell", op_quit),
       "quit":  ("quit (q)", "quit the shell", op_quit),
       "!":     ("! _cmd_", "execute command in parent shell", op_shell),
       "debug": ("debug _id_", "display the event log for the given job", op_debug),
       "clean": ("clean _id_", "clean job data", op_clean),
       "kill":  ("kill  _id_", "kill an active job", op_kill), 
       "info":  ("info _id_", "get job info", op_info),
       "purge": ("purge _id_", "purge job data", op_purge),
       "tail":  ("tail  _id_", "tail -f the event log of a job", op_tail),
      }


def main():

    while True:
        inp = raw_input("disco> ").strip().lower()
        try:
            if inp in ['q', 'quit']:
                break
            else:
                execute(inp)
        except:
            print "\nBad command: %s" % inp
            op_help()
     

if __name__ == "__main__":
    main()

